# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyUni10', [dirname(__file__)])
        except ImportError:
            import _pyUni10
            return _pyUni10
        if fp is not None:
            try:
                _mod = imp.load_module('_pyUni10', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyUni10 = swig_import_helper()
    del swig_import_helper
else:
    import _pyUni10
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyUni10.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyUni10.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyUni10.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyUni10.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyUni10.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyUni10.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyUni10.SwigPyIterator_copy(self)
    def next(self): return _pyUni10.SwigPyIterator_next(self)
    def __next__(self): return _pyUni10.SwigPyIterator___next__(self)
    def previous(self): return _pyUni10.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyUni10.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyUni10.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyUni10.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyUni10.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyUni10.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyUni10.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyUni10.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyUni10.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class int_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.int_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.int_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.int_arr___bool__(self)
    def __len__(self): return _pyUni10.int_arr___len__(self)
    def pop(self): return _pyUni10.int_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.int_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.int_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.int_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.int_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.int_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.int_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.int_arr_append(self, *args)
    def empty(self): return _pyUni10.int_arr_empty(self)
    def size(self): return _pyUni10.int_arr_size(self)
    def clear(self): return _pyUni10.int_arr_clear(self)
    def swap(self, *args): return _pyUni10.int_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.int_arr_get_allocator(self)
    def begin(self): return _pyUni10.int_arr_begin(self)
    def end(self): return _pyUni10.int_arr_end(self)
    def rbegin(self): return _pyUni10.int_arr_rbegin(self)
    def rend(self): return _pyUni10.int_arr_rend(self)
    def pop_back(self): return _pyUni10.int_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.int_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_int_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.int_arr_push_back(self, *args)
    def front(self): return _pyUni10.int_arr_front(self)
    def back(self): return _pyUni10.int_arr_back(self)
    def assign(self, *args): return _pyUni10.int_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.int_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.int_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.int_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.int_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_int_arr
    __del__ = lambda self : None;
int_arr_swigregister = _pyUni10.int_arr_swigregister
int_arr_swigregister(int_arr)

class double_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.double_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.double_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.double_arr___bool__(self)
    def __len__(self): return _pyUni10.double_arr___len__(self)
    def pop(self): return _pyUni10.double_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.double_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.double_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.double_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.double_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.double_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.double_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.double_arr_append(self, *args)
    def empty(self): return _pyUni10.double_arr_empty(self)
    def size(self): return _pyUni10.double_arr_size(self)
    def clear(self): return _pyUni10.double_arr_clear(self)
    def swap(self, *args): return _pyUni10.double_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.double_arr_get_allocator(self)
    def begin(self): return _pyUni10.double_arr_begin(self)
    def end(self): return _pyUni10.double_arr_end(self)
    def rbegin(self): return _pyUni10.double_arr_rbegin(self)
    def rend(self): return _pyUni10.double_arr_rend(self)
    def pop_back(self): return _pyUni10.double_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.double_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_double_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.double_arr_push_back(self, *args)
    def front(self): return _pyUni10.double_arr_front(self)
    def back(self): return _pyUni10.double_arr_back(self)
    def assign(self, *args): return _pyUni10.double_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.double_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.double_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.double_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.double_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_double_arr
    __del__ = lambda self : None;
double_arr_swigregister = _pyUni10.double_arr_swigregister
double_arr_swigregister(double_arr)

class Qnum_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Qnum_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Qnum_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.Qnum_arr___bool__(self)
    def __len__(self): return _pyUni10.Qnum_arr___len__(self)
    def pop(self): return _pyUni10.Qnum_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.Qnum_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.Qnum_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.Qnum_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Qnum_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.Qnum_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.Qnum_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.Qnum_arr_append(self, *args)
    def empty(self): return _pyUni10.Qnum_arr_empty(self)
    def size(self): return _pyUni10.Qnum_arr_size(self)
    def clear(self): return _pyUni10.Qnum_arr_clear(self)
    def swap(self, *args): return _pyUni10.Qnum_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.Qnum_arr_get_allocator(self)
    def begin(self): return _pyUni10.Qnum_arr_begin(self)
    def end(self): return _pyUni10.Qnum_arr_end(self)
    def rbegin(self): return _pyUni10.Qnum_arr_rbegin(self)
    def rend(self): return _pyUni10.Qnum_arr_rend(self)
    def pop_back(self): return _pyUni10.Qnum_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.Qnum_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.Qnum_arr_push_back(self, *args)
    def front(self): return _pyUni10.Qnum_arr_front(self)
    def back(self): return _pyUni10.Qnum_arr_back(self)
    def assign(self, *args): return _pyUni10.Qnum_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.Qnum_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.Qnum_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.Qnum_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.Qnum_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_Qnum_arr
    __del__ = lambda self : None;
Qnum_arr_swigregister = _pyUni10.Qnum_arr_swigregister
Qnum_arr_swigregister(Qnum_arr)

class Bond_arr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond_arr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond_arr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Bond_arr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Bond_arr___nonzero__(self)
    def __bool__(self): return _pyUni10.Bond_arr___bool__(self)
    def __len__(self): return _pyUni10.Bond_arr___len__(self)
    def pop(self): return _pyUni10.Bond_arr_pop(self)
    def __getslice__(self, *args): return _pyUni10.Bond_arr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyUni10.Bond_arr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyUni10.Bond_arr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Bond_arr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyUni10.Bond_arr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyUni10.Bond_arr___setitem__(self, *args)
    def append(self, *args): return _pyUni10.Bond_arr_append(self, *args)
    def empty(self): return _pyUni10.Bond_arr_empty(self)
    def size(self): return _pyUni10.Bond_arr_size(self)
    def clear(self): return _pyUni10.Bond_arr_clear(self)
    def swap(self, *args): return _pyUni10.Bond_arr_swap(self, *args)
    def get_allocator(self): return _pyUni10.Bond_arr_get_allocator(self)
    def begin(self): return _pyUni10.Bond_arr_begin(self)
    def end(self): return _pyUni10.Bond_arr_end(self)
    def rbegin(self): return _pyUni10.Bond_arr_rbegin(self)
    def rend(self): return _pyUni10.Bond_arr_rend(self)
    def pop_back(self): return _pyUni10.Bond_arr_pop_back(self)
    def erase(self, *args): return _pyUni10.Bond_arr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyUni10.new_Bond_arr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyUni10.Bond_arr_push_back(self, *args)
    def front(self): return _pyUni10.Bond_arr_front(self)
    def back(self): return _pyUni10.Bond_arr_back(self)
    def assign(self, *args): return _pyUni10.Bond_arr_assign(self, *args)
    def resize(self, *args): return _pyUni10.Bond_arr_resize(self, *args)
    def insert(self, *args): return _pyUni10.Bond_arr_insert(self, *args)
    def reserve(self, *args): return _pyUni10.Bond_arr_reserve(self, *args)
    def capacity(self): return _pyUni10.Bond_arr_capacity(self)
    __swig_destroy__ = _pyUni10.delete_Bond_arr
    __del__ = lambda self : None;
Bond_arr_swigregister = _pyUni10.Bond_arr_swigregister
Bond_arr_swigregister(Bond_arr)

class Qnum2int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum2int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum2int, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyUni10.Qnum2int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyUni10.Qnum2int___nonzero__(self)
    def __bool__(self): return _pyUni10.Qnum2int___bool__(self)
    def __len__(self): return _pyUni10.Qnum2int___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyUni10.Qnum2int___getitem__(self, *args)
    def __delitem__(self, *args): return _pyUni10.Qnum2int___delitem__(self, *args)
    def has_key(self, *args): return _pyUni10.Qnum2int_has_key(self, *args)
    def keys(self): return _pyUni10.Qnum2int_keys(self)
    def values(self): return _pyUni10.Qnum2int_values(self)
    def items(self): return _pyUni10.Qnum2int_items(self)
    def __contains__(self, *args): return _pyUni10.Qnum2int___contains__(self, *args)
    def key_iterator(self): return _pyUni10.Qnum2int_key_iterator(self)
    def value_iterator(self): return _pyUni10.Qnum2int_value_iterator(self)
    def __setitem__(self, *args): return _pyUni10.Qnum2int___setitem__(self, *args)
    def asdict(self): return _pyUni10.Qnum2int_asdict(self)
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum2int(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyUni10.Qnum2int_empty(self)
    def size(self): return _pyUni10.Qnum2int_size(self)
    def clear(self): return _pyUni10.Qnum2int_clear(self)
    def swap(self, *args): return _pyUni10.Qnum2int_swap(self, *args)
    def get_allocator(self): return _pyUni10.Qnum2int_get_allocator(self)
    def begin(self): return _pyUni10.Qnum2int_begin(self)
    def end(self): return _pyUni10.Qnum2int_end(self)
    def rbegin(self): return _pyUni10.Qnum2int_rbegin(self)
    def rend(self): return _pyUni10.Qnum2int_rend(self)
    def count(self, *args): return _pyUni10.Qnum2int_count(self, *args)
    def erase(self, *args): return _pyUni10.Qnum2int_erase(self, *args)
    def find(self, *args): return _pyUni10.Qnum2int_find(self, *args)
    def lower_bound(self, *args): return _pyUni10.Qnum2int_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyUni10.Qnum2int_upper_bound(self, *args)
    __swig_destroy__ = _pyUni10.delete_Qnum2int
    __del__ = lambda self : None;
Qnum2int_swigregister = _pyUni10.Qnum2int_swigregister
Qnum2int_swigregister(Qnum2int)


def QnumF(*args):
  return _pyUni10.QnumF(*args)
QnumF = _pyUni10.QnumF
PRT_EVEN = _pyUni10.PRT_EVEN
PRT_ODD = _pyUni10.PRT_ODD
PRTF_EVEN = _pyUni10.PRTF_EVEN
PRTF_ODD = _pyUni10.PRTF_ODD
class Qnum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qnum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyUni10.new_Qnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete_Qnum
    __del__ = lambda self : None;
    def U1(self): return _pyUni10.Qnum_U1(self)
    def prt(self): return _pyUni10.Qnum_prt(self)
    def prtF(self): return _pyUni10.Qnum_prtF(self)
    def assign(self, *args): return _pyUni10.Qnum_assign(self, *args)
    __swig_getmethods__["isFermionic"] = lambda x: _pyUni10.Qnum_isFermionic
    if _newclass:isFermionic = staticmethod(_pyUni10.Qnum_isFermionic)
    def __eq__(self, *args): return _pyUni10.Qnum___eq__(self, *args)
    def __mul__(self, *args): return _pyUni10.Qnum___mul__(self, *args)
    def __neg__(self): return _pyUni10.Qnum___neg__(self)
    def __copy__(self): return _pyUni10.Qnum___copy__(self)
    def cp(self): return _pyUni10.Qnum_cp(self)
    def __str__(self): return _pyUni10.Qnum___str__(self)
    def assignF(self, *args): return _pyUni10.Qnum_assignF(self, *args)
    U1_UPB = _pyUni10.Qnum_U1_UPB
    U1_LOB = _pyUni10.Qnum_U1_LOB
Qnum_swigregister = _pyUni10.Qnum_swigregister
Qnum_swigregister(Qnum)

def Qnum_isFermionic():
  return _pyUni10.Qnum_isFermionic()
Qnum_isFermionic = _pyUni10.Qnum_isFermionic

BD_IN = _pyUni10.BD_IN
BD_OUT = _pyUni10.BD_OUT
class Bond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyUni10.new_Bond(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pyUni10.Bond_assign(self, *args)
    def type(self): return _pyUni10.Bond_type(self)
    def dim(self): return _pyUni10.Bond_dim(self)
    def __eq__(self, *args): return _pyUni10.Bond___eq__(self, *args)
    def __copy__(self): return _pyUni10.Bond___copy__(self)
    def cp(self): return _pyUni10.Bond_cp(self)
    def __str__(self): return _pyUni10.Bond___str__(self)
    def change(self, *args): return _pyUni10.Bond_change(self, *args)
    def combine(self, *args): return _pyUni10.Bond_combine(self, *args)
    def degeneracy(self): return _pyUni10.Bond_degeneracy(self)
    def Qlist(self): return _pyUni10.Bond_Qlist(self)
    __swig_destroy__ = _pyUni10.delete_Bond
    __del__ = lambda self : None;
Bond_swigregister = _pyUni10.Bond_swigregister
Bond_swigregister(Bond)


def combine(*args):
  return _pyUni10.combine(*args)
combine = _pyUni10.combine
class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyUni10.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUni10.delete_Matrix
    __del__ = lambda self : None;
    def row(self): return _pyUni10.Matrix_row(self)
    def col(self): return _pyUni10.Matrix_col(self)
    def isDiag(self): return _pyUni10.Matrix_isDiag(self)
    def elemNum(self): return _pyUni10.Matrix_elemNum(self)
    def diagonalize(self): return _pyUni10.Matrix_diagonalize(self)
    def svd(self): return _pyUni10.Matrix_svd(self)
    def addElem(self, *args): return _pyUni10.Matrix_addElem(self, *args)
    def randomize(self): return _pyUni10.Matrix_randomize(self)
    def orthoRand(self): return _pyUni10.Matrix_orthoRand(self)
    def set_zero(self): return _pyUni10.Matrix_set_zero(self)
    def transpose(self): return _pyUni10.Matrix_transpose(self)
    def trace(self): return _pyUni10.Matrix_trace(self)
    def save(self, *args): return _pyUni10.Matrix_save(self, *args)
    def load(self, *args): return _pyUni10.Matrix_load(self, *args)
    def __eq__(self, *args): return _pyUni10.Matrix___eq__(self, *args)
    def __copy__(self): return _pyUni10.Matrix___copy__(self)
    def cp(self): return _pyUni10.Matrix_cp(self)
    def __str__(self): return _pyUni10.Matrix___str__(self)
    def __imul__(self, *args): return _pyUni10.Matrix___imul__(self, *args)
    def __iadd__(self, *args): return _pyUni10.Matrix___iadd__(self, *args)
    def elem(self): return _pyUni10.Matrix_elem(self)
    def at(self, *args): return _pyUni10.Matrix_at(self, *args)
Matrix_swigregister = _pyUni10.Matrix_swigregister
Matrix_swigregister(Matrix)

# This file is compatible with both classic and new-style classes.


